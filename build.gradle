import org.gradle.api.artifacts.maven.MavenDeployment

/*
 * Copyright (c) 2014 - David Buschman
 * Copyright (c) 2008 - 2013 10gen, Inc. <http://10gen.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'


def configDir = new File(rootDir, 'config')


group = 'me.lightspeed7'
version = '0.10.0'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories{
    mavenCentral()
}

project.ext {
  springVersion = "4.0.3.RELEASE"
}

project.ext.buildingWith = { n ->
    project.hasProperty(n) && project.property(n).toBoolean()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.9'
    compile 'org.mongodb:mongodb-driver:3.0.2'
    
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.google.guava:guava:16.0.1'   
    testCompile 'com.google.code.gson:gson:2.2.4'
    
    testCompile("org.springframework:spring-core:${project.springVersion}")
    testCompile("org.springframework:spring-context:${project.springVersion}")
    testCompile("org.springframework:spring-expression:${project.springVersion}")
    testCompile("org.springframework:spring-test:${project.springVersion}")
	
    testCompile 'org.codehaus.groovy:groovy-all:2.0.8'
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude group: 'junit', module: 'junit-dep'
    }
    
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

/* Code quality */
checkstyle {
    configFile = new File("$configDir/checkstyle.xml")
}

tasks.withType(Checkstyle) {
    exclude '**/me/lightspeed7/mongofs/gridfs/**'
}

findbugs {
    excludeFilter = new File("$configDir/findbugs-exclude.xml")
    sourceSets = [sourceSets.main]
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = project.buildingWith('xmlReports.enabled')
        html.enabled = !project.buildingWith('xmlReports.enabled')
    }
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

codenarc {
    toolVersion = '0.20'
    reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
}


jacoco {
    toolVersion = "0.6.2.201302030002"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.0"
}

project.ext.mavenDeployers = []


install {
    project.mavenDeployers << repositories.mavenInstaller
}


uploadArchives {
	repositories.mavenDeployer {
        repository(url: "file:///Users/david/dev/dbuschman7/mvn-repo/")
		pom.project {
	        name 'me.lightspeed7:MongoFS'
	        description =
	        '''
	        An extension to the MongoDB Java Driver library that goes beyond what the GridFS feature supports.
	        Compressed file storage, zip files, temporary files
	        '''
	        url 'http://github.com/dbuschman7/mongoFS'
	        scm {
	            url 'git@github.com:dbuschman7/mongoFS.git'
	            connection 'scm:git:git@github.com:dbuschman7/mongoFS.git'
	            developerConnection 'scm:git:git@github.com:dbuschman7/mongoFS.git'
	
	        }
	        licenses {
	            license {
	                name 'The Apache Software License, Version 2.0'
	                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	                distribution 'repo'
	            }
	        }
	        developers {
	            developer {
	                id 'dbuschman7'
	                name 'David Buschman'
	                url = 'http://github.com/dbuschman7'
	            }
	        }
		}
    }
}


test {
        include "**/*Test.class"

        beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
        }
}

sourceSets {
    test {
        groovy { srcDirs = ['src/test/java'] }
        //Note: no groovy/spock tests in acceptance, these are Java tests
        java { srcDirs = ['src/test/java'] }
    }
}




